services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n_db
      POSTGRES_USER: n8n_user
      POSTGRES_PASSWORD: superseguro
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U n8n_user -d n8n_db']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n-network

  # n8n
  n8n:
    build: .
    container_name: n8n-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Configuración de base de datos
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n_db
      DB_POSTGRESDB_USER: n8n_user
      DB_POSTGRESDB_PASSWORD: superseguro

      # Configuración de n8n
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      N8N_ENCRYPTION_KEY: cambia-esta-clave-larga-y-unica-para-produccion

      # Autenticación básica (opcional)
      N8N_BASIC_AUTH_ACTIVE: 'true'
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: tu_password

      # Configuración adicional
      NODE_ENV: production
      TZ: America/Bogota
      # WEBHOOK_URL se debe configurar según el entorno de despliegue

      # Para desarrollo con túnel (opcional)
      # N8N_TUNNEL: true
    volumes:
      - n8n_data:/home/node/.n8n
      - ./logs:/home/node/.n8n/logs
    ports:
      - '5679:5678'
    networks:
      - n8n-network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:5678/healthz',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local

networks:
  n8n-network:
    driver: bridge
