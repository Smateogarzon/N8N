steps:
  # Construir la imagen Docker
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-f',
        'Dockerfile.cloudrun',
        '-t',
        'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA',
        '.',
      ]

  # Escanear imagen con Trivy (vulnerabilidades críticas y altas)
  - name: 'aquasec/trivy'
    id: 'trivy-scan'
    args:
      - 'image'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--exit-code'
      - '1'
      - '--format'
      - 'table'
      - '--skip-files'
      - '/usr/local/bin/trivy'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'

  # Escanear con Trivy para vulnerabilidades medias y bajas (guardar en archivo)
  - name: 'aquasec/trivy'
    id: 'trivy-scan-medium'
    args:
      - 'image'
      - '--severity'
      - 'MEDIUM,LOW'
      - '--exit-code'
      - '0'
      - '--format'
      - 'table'
      - '--output'
      - 'trivy-non-critical-results.txt'
      - '--skip-files'
      - '/usr/local/bin/trivy'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'

  # Escanear con Google Artifact Analysis
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  #   id: 'artifact-scan'
  #   entrypoint: gcloud
  #   args:
  #     - 'artifacts'
  #     - 'docker'
  #     - 'images'
  #     - 'scan'
  #     - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'
  #     - '--location=us'
  #     - '--format=json'
  #     - '--quiet'

  # Mostrar vulnerabilidades no críticas solo si existen
  - name: 'alpine'
    id: 'display-non-critical-vulnerabilities'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -s trivy-non-critical-results.txt ]; then
          echo "--- Found non-critical vulnerabilities (Medium/Low) ---"
          cat trivy-non-critical-results.txt
          echo "-------------------------------------------------------"
        else
          echo "✅ No non-critical vulnerabilities found."
        fi

  # Subir imagen a Container Registry (solo si escaneos pasan)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA']

  # Desplegar a Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - n8n
      - --image
      - gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA
      - --region
      - us-central1
      - --platform
      - managed
      - --allow-unauthenticated
      - --port
      - '8080'
      - --memory
      - 2Gi
      - --cpu
      - '2'
      - --cpu-boost
      - --max-instances
      - '5'
      - --timeout
      - '300'
      - --concurrency
      - '80'
      - --add-cloudsql-instances
      - ${_CLOUDSQL_INSTANCE}
      - --set-env-vars
      - >-
        NODE_ENV=production,
        DB_TYPE=postgresdb,
        DB_POSTGRESDB_HOST=/cloudsql/${_CLOUDSQL_INSTANCE},
        DB_POSTGRESDB_PORT=5432,
        DB_POSTGRESDB_DATABASE=${_DB_NAME},
        DB_POSTGRESDB_USER=${_DB_USER},
        DB_POSTGRESDB_PASSWORD=${_DB_PASSWORD},
        N8N_ENCRYPTION_KEY=${_N8N_ENCRYPTION_KEY},
        N8N_BASIC_AUTH_ACTIVE=true,
        N8N_BASIC_AUTH_USER=${_N8N_USER},
        N8N_BASIC_AUTH_PASSWORD=${_N8N_PASSWORD},
        N8N_DISABLE_UI=false,
        N8N_PATH=/,
        N8N_HOST=0.0.0.0,
        N8N_PROTOCOL=https,
        N8N_EDITOR_BASE_URL=${_BASE_URL},
        WEBHOOK_URL=${_BASE_URL}/

# Opciones de build
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'

# Sustituciones (se definen en Cloud Build)
substitutions:
  _CLOUDSQL_INSTANCE: 'infinity-420816:us-central1:n8n-postgres'
  _DB_NAME: 'n8n_db'
  _DB_USER: 'n8n_user'
  _DB_PASSWORD: ''
  _N8N_ENCRYPTION_KEY: ''
  _N8N_USER: 'Mateo'
  _N8N_PASSWORD: ''
  _BASE_URL: 'https://n8n-1059853171455.us-central1.run.app'
