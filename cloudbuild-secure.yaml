steps:
  # Construir la imagen Docker
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-f',
        'Dockerfile.cloudrun',
        '-t',
        'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA',
        '.',
      ]

  # Escanear imagen con Trivy (vulnerabilidades cr√≠ticas y altas)
  - name: 'aquasec/trivy'
    id: 'trivy-scan'
    args:
      - 'image'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--exit-code'
      - '1'
      - '--format'
      - 'json'
      - '--output'
      - 'trivy-results.json'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'

  # Escanear con Trivy para vulnerabilidades medias (solo reporte)
  - name: 'aquasec/trivy'
    id: 'trivy-scan-medium'
    args:
      - 'image'
      - '--severity'
      - 'MEDIUM'
      - '--exit-code'
      - '0'
      - '--format'
      - 'table'
      - '--output'
      - 'trivy-medium-results.txt'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'

  # Escanear con Google Artifact Analysis
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'artifact-scan'
    entrypoint: gcloud
    args:
      - 'artifacts'
      - 'docker'
      - 'images'
      - 'scan'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'
      - '--location=us'
      - '--format=json'
      - '--quiet'

  # Verificar resultados de escaneo
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'check-vulnerabilities'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== Verificando resultados de escaneo ==="

        # Verificar si hay vulnerabilidades cr√≠ticas/altas en Trivy
        if [ -f "trivy-results.json" ]; then
          VULN_COUNT=$(jq '.Results[].Vulnerabilities | length' trivy-results.json | awk '{sum+=$1} END {print sum+0}')
          echo "Vulnerabilidades encontradas: $$VULN_COUNT"
          
          if [ "$$VULN_COUNT" -gt 0 ]; then
            echo "‚ùå Se encontraron $$VULN_COUNT vulnerabilidades cr√≠ticas/altas"
            echo "Detalles:"
            jq -r '.Results[].Vulnerabilities[] | "  - \(.VulnerabilityID): \(.Title) (Severity: \(.Severity))"' trivy-results.json
            exit 1
          else
            echo "‚úÖ No se encontraron vulnerabilidades cr√≠ticas/altas"
          fi
        fi

        # Mostrar vulnerabilidades medias (solo informativo)
        if [ -f "trivy-medium-results.txt" ]; then
          echo "üìã Vulnerabilidades medias encontradas:"
          cat trivy-medium-results.txt
        fi

  # Subir imagen a Container Registry (solo si escaneos pasan)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA']

  # Desplegar a Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'n8n'
      - '--image'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--timeout'
      - '300'
      - '--concurrency'
      - '80'
      - '--set-env-vars'
      - 'DB_TYPE=postgresdb,DB_POSTGRESDB_HOST=${_DB_HOST},DB_POSTGRESDB_DATABASE=${_DB_NAME},DB_POSTGRESDB_USER=${_DB_USER},DB_POSTGRESDB_PASSWORD=${_DB_PASSWORD},N8N_ENCRYPTION_KEY=${_N8N_ENCRYPTION_KEY},N8N_BASIC_AUTH_ACTIVE=true,N8N_BASIC_AUTH_USER=${_N8N_USER},N8N_BASIC_AUTH_PASSWORD=${_N8N_PASSWORD},NODE_ENV=production'

# Opciones de build
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8' # M√°s recursos para escaneos

# Sustituciones (se definen en Cloud Build)
substitutions:
  _DB_HOST: 'your-postgres-host'
  _DB_NAME: 'n8n_db'
  _DB_USER: 'n8n_user'
  _DB_PASSWORD: 'your-db-password'
  _N8N_ENCRYPTION_KEY: 'your-encryption-key'
  _N8N_USER: 'admin'
  _N8N_PASSWORD: 'your-n8n-password'
