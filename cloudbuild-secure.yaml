steps:
  # Construir la imagen Docker
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-f',
        'Dockerfile.cloudrun',
        '-t',
        'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA',
        '.',
      ]

  # Escanear imagen con Trivy (vulnerabilidades críticas y altas)
  - name: 'aquasec/trivy'
    id: 'trivy-scan'
    args:
      - 'image'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--exit-code'
      - '1'
      - '--format'
      - 'table'
      - '--skip-files'
      - '/usr/local/bin/trivy'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'

  # Escanear con Trivy para vulnerabilidades medias y bajas (guardar en archivo)
  - name: 'aquasec/trivy'
    id: 'trivy-scan-medium'
    args:
      - 'image'
      - '--severity'
      - 'MEDIUM,LOW'
      - '--exit-code'
      - '0'
      - '--format'
      - 'table'
      - '--output'
      - 'trivy-non-critical-results.txt'
      - '--skip-files'
      - '/usr/local/bin/trivy'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'

  # Escanear con Google Artifact Analysis
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'artifact-scan'
    entrypoint: gcloud
    args:
      - 'artifacts'
      - 'docker'
      - 'images'
      - 'scan'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'
      - '--location=us'
      - '--format=json'
      - '--quiet'

  # Mostrar vulnerabilidades no críticas solo si existen
  - name: 'alpine'
    id: 'display-non-critical-vulnerabilities'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -s trivy-non-critical-results.txt ]; then
          echo "--- Found non-critical vulnerabilities (Medium/Low) ---"
          cat trivy-non-critical-results.txt
          echo "-------------------------------------------------------"
        else
          echo "✅ No non-critical vulnerabilities found."
        fi

  # Subir imagen a Container Registry (solo si escaneos pasan)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA']

  # Desplegar a Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'n8n'
      - '--image'
      - 'gcr.io/$PROJECT_ID/n8n:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--cpu-boost'
      - '--max-instances'
      - '5'
      - '--timeout'
      - '300'
      - '--concurrency'
      - '80'
      - '--add-cloudsql-instances=${_CLOUDSQL_INSTANCE}'
      - '--set-env-vars'
      - 'DB_TYPE=postgresdb,DB_POSTGRESDB_HOST=/cloudsql/${_CLOUDSQL_INSTANCE},DB_POSTGRESDB_DATABASE=${_DB_NAME},DB_POSTGRESDB_USER=${_DB_USER},DB_POSTGRESDB_PASSWORD=${_DB_PASSWORD},N8N_ENCRYPTION_KEY=${_N8N_ENCRYPTION_KEY},N8N_BASIC_AUTH_ACTIVE=true,N8N_BASIC_AUTH_USER=${_N8N_USER},N8N_BASIC_AUTH_PASSWORD=${_N8N_PASSWORD},NODE_ENV=production,WEBHOOK_URL=${_WEBHOOK_URL},N8N_RUNNERS_ENABLED=true,N8N_RUNNERS_MODE=internal,EXECUTIONS_MODE=regular,N8N_DISABLE_UI=false,N8N_PATH=/'

# Opciones de build
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_MEDIUM'

# Sustituciones (se definen en Cloud Build)
substitutions:
  # Configuración de Cloud SQL
  _CLOUDSQL_INSTANCE: 'your-project-id:us-central1:your-instance-name'
  _DB_NAME: 'n8n_db'
  _DB_USER: 'n8n_user'
  _DB_PASSWORD: 'your-db-password'
  _N8N_ENCRYPTION_KEY: 'your-encryption-key'
  _N8N_USER: 'admin'
  _N8N_PASSWORD: 'your-n8n-password'
  _WEBHOOK_URL: 'https://your-service-url.run.app/'
